<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Professional Penguin</title><link>https://mrpenguin07.github.io/</link><description>Recent content on Professional Penguin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 05 Jan 2024 08:06:25 +0600</lastBuildDate><atom:link href="https://mrpenguin07.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Tailscale: Indistinguishable from magic</title><link>https://mrpenguin07.github.io/posts/category/interestingprojects/tailscale/tailscale/</link><pubDate>Fri, 05 Jan 2024 08:06:25 +0600</pubDate><guid>https://mrpenguin07.github.io/posts/category/interestingprojects/tailscale/tailscale/</guid><description>Introducing Tailscale:
&amp;hellip; and the magic of pairing it with pfSense
Redefining network topologies: Wow. Just wow.
It isn&amp;rsquo;t often a novel project impresses me as thoroughly as Tailscale!
So impressive that i&amp;rsquo;m reminded of Clarke&amp;rsquo;s three laws;
&amp;ldquo;Any sufficiently advanced technology is indistinguishable from magic&amp;rdquo;. Spot on. There&amp;rsquo;s something magical about a project which ticks so many boxes;
It&amp;rsquo;s &amp;lsquo;simple&amp;rsquo; to setup, boasts near unlimited use cases, can be overlayed on top of an existing network - and it&amp;rsquo;s &amp;lsquo;free&amp;rsquo; tier is rather generous for individuals and likely to be all one needs.</description></item><item><title>Bcachefs: A COWs Journey</title><link>https://mrpenguin07.github.io/posts/category/interestingprojects/bcachefs/bcachefs-6.7/</link><pubDate>Sun, 05 Nov 2023 08:06:25 +0600</pubDate><guid>https://mrpenguin07.github.io/posts/category/interestingprojects/bcachefs/bcachefs-6.7/</guid><description>What&amp;rsquo;s new with bcachefs Over the past year, my journey with bcachefs - in pursuit of unknown benefits - sure has been interesting, and full of drama if one reads the fs kernel mailing list. The project, with its vow to deliver enhanced performance and reliability, has no doubt made great progress and reached what many believed would (or should) never happen. The recent announcement of its inclusion in 6.7 Kernel was a triumphant moment, marking a significant milestone for the project.</description></item><item><title>SwayFX: Sway, but with eye candy!</title><link>https://mrpenguin07.github.io/posts/category/interestingprojects/swaywm+swayfx/swayfx/</link><pubDate>Sun, 05 Nov 2023 08:06:25 +0600</pubDate><guid>https://mrpenguin07.github.io/posts/category/interestingprojects/swaywm+swayfx/swayfx/</guid><description>Introducing SwayFX: A Cutting-Edge Fork of the Sway Window Manager Enhanced Rendering with FX_Renderer SwayFX, a pioneering fork of the well-established Wayland window manager Sway, brings revolutionary features and visual enhancements.
Central to SwayFX is the fx_renderer, which replaces the simpler wlr_renderer, unleashing the potential of GLES2 for a visually stunning desktop experience.
Key Features Blur Effects Rounded Corners and Borders Shadows Dim Unfocused Windows Per Application Saturation Control Seamless Integration with Sway SwayFX maintains complete compatibility with the Sway configuration file, allowing users to transition smoothly without needing to alter their existing setups.</description></item><item><title>Go বেসিক</title><link>https://mrpenguin07.github.io/notes/go/basic/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mrpenguin07.github.io/notes/go/basic/_index.bn/</guid><description/></item><item><title>Introduction</title><link>https://mrpenguin07.github.io/notes/go/basic/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mrpenguin07.github.io/notes/go/basic/introduction/</guid><description> Hello World A sample go program is show here.
package main import &amp;#34;fmt&amp;#34; func main() { message := greetMe(&amp;#34;world&amp;#34;) fmt.Println(message) } func greetMe(name string) string { return &amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34; } Run the program as below:
$ go run hello.go Variables Normal Declaration:
var msg string msg = &amp;#34;Hello&amp;#34; Shortcut:
msg := &amp;#34;Hello&amp;#34; Constants const Phi = 1.618</description></item><item><title>Basic Types</title><link>https://mrpenguin07.github.io/notes/go/basic/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mrpenguin07.github.io/notes/go/basic/types/</guid><description>Strings str := &amp;#34;Hello&amp;#34; Multiline string
str := `Multiline string` Numbers Typical types
num := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(&amp;#39;a&amp;#39;) // byte (alias for uint8) Other Types
var u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.</description></item><item><title>অ্যাডভান্সড</title><link>https://mrpenguin07.github.io/notes/go/advanced/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mrpenguin07.github.io/notes/go/advanced/_index.bn/</guid><description/></item><item><title>Flow Control</title><link>https://mrpenguin07.github.io/notes/go/basic/flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mrpenguin07.github.io/notes/go/basic/flow-control/</guid><description>Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;) Switch switch day { case &amp;#34;sunday&amp;#34;: // cases don&amp;#39;t &amp;#34;fall through&amp;#34; by default! fallthrough case &amp;#34;saturday&amp;#34;: rest() default: work() } Loop for count := 0; count &amp;lt;= 10; count++ { fmt.Println(&amp;#34;My counter is at&amp;#34;, count) } entry := []string{&amp;#34;Jack&amp;#34;,&amp;#34;John&amp;#34;,&amp;#34;Jones&amp;#34;} for i, val := range entry { fmt.</description></item><item><title>File Manipulation</title><link>https://mrpenguin07.github.io/notes/go/advanced/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mrpenguin07.github.io/notes/go/advanced/files/</guid><description> Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;)</description></item><item><title>Bash Variables</title><link>https://mrpenguin07.github.io/notes/bash/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mrpenguin07.github.io/notes/bash/basic/</guid><description> Variable NAME=&amp;#34;John&amp;#34; echo $NAME echo &amp;#34;$NAME&amp;#34; echo &amp;#34;${NAME} Condition if [[ -z &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is empty&amp;#34; elif [[ -n &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is not empty&amp;#34; fi</description></item><item><title>Go এর নোট সমূহ</title><link>https://mrpenguin07.github.io/notes/go/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mrpenguin07.github.io/notes/go/_index.bn/</guid><description>Go Notes</description></item><item><title>নোট সমূহ</title><link>https://mrpenguin07.github.io/notes/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mrpenguin07.github.io/notes/_index.bn/</guid><description/></item><item><title>ব্যাশের নোট সমূহ</title><link>https://mrpenguin07.github.io/notes/bash/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mrpenguin07.github.io/notes/bash/_index.bn/</guid><description>Bash Notes</description></item></channel></rss>