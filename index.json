[{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://mrpenguin07.github.io/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Go পরিচিতি"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://mrpenguin07.github.io/notes/go/basic/_index.bn/","summary":"","tags":null,"title":"Go বেসিক"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://mrpenguin07.github.io/notes/go/advanced/_index.bn/","summary":"","tags":null,"title":"অ্যাডভান্সড"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://mrpenguin07.github.io/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"বেসিক টাইপ সমূহ"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://mrpenguin07.github.io/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://mrpenguin07.github.io/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"ফাইল ম্যানিপুলেশন"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://mrpenguin07.github.io/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"ব্যাশ ভেরিয়েবল"},{"categories":null,"contents":"Introducing Tailscale:\n\u0026hellip; and the magic of pairing it with pfSense\nRedefining network topologies: Wow. Just wow.\nIt isn\u0026rsquo;t often a novel project impresses me as thoroughly as Tailscale!\nSo impressive that i\u0026rsquo;m reminded of Clarke\u0026rsquo;s three laws;\n\u0026ldquo;Any sufficiently advanced technology is indistinguishable from magic\u0026rdquo;. Spot on. There\u0026rsquo;s something magical about a project which ticks so many boxes;\nIt\u0026rsquo;s \u0026lsquo;simple\u0026rsquo; to setup, boasts near unlimited use cases, can be overlayed on top of an existing network - and it\u0026rsquo;s \u0026lsquo;free\u0026rsquo; tier is rather generous for individuals and likely to be all one needs.\nWhat happened to the old (and usually accurate) adage \u0026ldquo;we can only ever choose 2 between good|fast|cheap ?!\u0026rdquo; In this short blog i\u0026rsquo;ll focus on how i\u0026rsquo;ve tag teamed Tailscale with pfSense for the ultimate NAT destroying chokeslam, but first let\u0026rsquo;s hit on some features and network theory.\nKey Features: Enhanced Routing Efficiency Bypasses CGNAT / those behind double NAT No open ports on firewalls. No port forwarding Set any device to be an exit node Built in DNS resolution for all devices Encrypted traffic between every node Cost-Effective Implementation Seamless WireGuard Integration Simplified Network Management Increased Scalability Low Latency Communication Cross-Platform Compatibility These key features read well at first glance, however it\u0026rsquo;s upon deeper introspection and using creativity of how it can be applied to your own network(s) that it truly sinks in - likely to the point of reaching an epiphany something along the lines of: \u0026ldquo;Where have you been all my life?!\u0026rdquo;.\nComparing topologies: The choice of topology plays a crucial role in determining the network\u0026rsquo;s efficiency, security, and scalability.\nTwo prominent models, the traditional Hub-and-Spoke and the innovative Mesh network, present distinct approaches to connecting remote locations.\nLet\u0026rsquo;s look at a brief comparison between these two VPN topologies:\nAbove: The topology here screams inefficiency!\nAbove: Unless a centralized network is a must\u0026hellip; the routing benefits, added security, low cost, and ease of implementation are rather attractive.\nOftentimes when visualizing something it makes a whole lot more sense: There\u0026rsquo;s a lot of efficiency to be gained here.\nLINK: Tailscales official \u0026lsquo;how it works\u0026rsquo; - a far more comprehensive explanation.\nMy Tailscale + pfSense homelab: A game-changer:\nIn the ever-evolving landscape of home networking and server setups, the integration of Tailscale with pfSense has been a game-changer for redefining the dynamics of my homelab and devices.\nTailscale, with its simplicity and secure networking capabilities, seamlessly extends my local network, enabling easy access to devices from anywhere. The intuitive zero-config setup has transformed the way I connect to servers and resources, making remote work and access to LAN devices a breeze.\nThe \u0026lsquo;free\u0026rsquo; tier generously provides up to 100 clients - however when you add pfSense as a node, create a simple outbound NAT rule and enable routing for your subnets and devices back through the Tailscale interface - this only counts as a single device on your tailnet. That\u0026rsquo;s right, all clients behind your router are zero config!\nThe marriage of Tailscale\u0026rsquo;s user-friendly Wireguard based VPN mesh with pfSense\u0026rsquo;s robust networking capabilities not only redefines connectivity - but adds an extra layer of control and security to my network.\nUtilizing the versatility of pfSense allows for advanced configuration and policy routing, making it an ideal companion to Tailscale.\nThis solution optimizes network performance, ensures security, and simplifies the management of my homelab + LAN + Cloud and remote device experience.\nBenefits i\u0026rsquo;m enjoying: Bypassing CGNAT / Dbl. NAT:\nMy homelab is behind a Dbl NAT - which makes forwarding ports, and listening as a traditional server for incomming connections impossible.\nNot the case with Tailscale, users are able to simply bypass/traverse restrictive NAT networks with zero config. Actually mesh devices simply don\u0026rsquo;t care where they are or what the topology of networks between each node look like; so long as the device can reach the main auth server, they will create encrypted tunnels. Wonderful.\nEach node has access to server resources and LAN subnets:\nSimply set the subnets to advertise on each device;\nSeamless Resource Access: Enables users to access all servers and local area network (LAN) resources effortlessly, without the need for extensive configuration. Zero Configuration: Simplifies the user experience by eliminating the need for manual setup. SSH just works. External devices can now SSH into devices behind the firewall, as if they were local. Mount NAS devices - remotely just as if you were local:\nRemote NAS Access: Enables mounting of Network Attached Storage devices remotely, as if they were physically on the local network(!!). Seamless File Access: Facilitates easy access to files and data stored on NAS devices from any location. Using pfSense as an exit node:\nDevices can now share eachothers WAN/Internet connection, as if they originated from that device. In my example, external devices can now easily share the traditional Wireguard VPN configured on pfSense as though they were on the LAN. Policy based routing:\nTraffic Control: Allows for the definition of specific routing rules based on policies, directing traffic according to predefined rules. Optimized Network Performance: Enables the optimization of network resources by directing traffic through designated paths. Load Balancing: Useful for balancing network traffic across multiple connections for efficient utilization. What about Cloud resources/VPCs?:\nSimple. Install the daemon on any compute, auth. the device, share subnets - and like magic it\u0026rsquo;s all accessible from every other device in your cluster. Adding the cloud resource as an exit node has many use cases.\nHow about the cons you ask?\nA fair enough question.\nThus far, the only con worth mentioning is the potential throughput limitation/bottleneck which - although i\u0026rsquo;ve personally never reached it - is inherent in the projects use of Go language; the networking stack for *BSD based devices is unfortunately in userland instead of the kernel.\nThere is a well written blog on this topic in the official documentation.\nRelated Video: Reveal the trick over on their Github page! ","date":"January 5, 2024","hero":"/posts/category/interestingprojects/tailscale/tailscale/images/tailscale_hero.png","permalink":"https://mrpenguin07.github.io/posts/category/interestingprojects/tailscale/tailscale/","summary":"Introducing Tailscale:\n\u0026hellip; and the magic of pairing it with pfSense\nRedefining network topologies: Wow. Just wow.\nIt isn\u0026rsquo;t often a novel project impresses me as thoroughly as Tailscale!\nSo impressive that i\u0026rsquo;m reminded of Clarke\u0026rsquo;s three laws;\n\u0026ldquo;Any sufficiently advanced technology is indistinguishable from magic\u0026rdquo;. Spot on. There\u0026rsquo;s something magical about a project which ticks so many boxes;\nIt\u0026rsquo;s \u0026lsquo;simple\u0026rsquo; to setup, boasts near unlimited use cases, can be overlayed on top of an existing network - and it\u0026rsquo;s \u0026lsquo;free\u0026rsquo; tier is rather generous for individuals and likely to be all one needs.","tags":["Wireguard","Mesh Networks","NAT traversal","Routing"],"title":"Tailscale: Indistinguishable from magic"},{"categories":null,"contents":"What\u0026rsquo;s new with bcachefs Over the past year, my journey with bcachefs - in pursuit of unknown benefits - sure has been interesting, and full of drama if one reads the fs kernel mailing list. The project, with its vow to deliver enhanced performance and reliability, has no doubt made great progress and reached what many believed would (or should) never happen. The recent announcement of its inclusion in 6.7 Kernel was a triumphant moment, marking a significant milestone for the project. However the phoronix benchmark results presented have been less than impressive, albeit I do question the testing methadology.\nThe integration of Bcachefs into the kernel brings it one step closer to becoming a filesystem chosen by many rather than a few willing guinea pigs. Despite these results, the potential is there and it\u0026rsquo;s features are indicative of a promising future.\nThe (not so) juicy numbers Source: Phoronix Benchmarks The numbers, when juxtaposed with other filesystems, revealed a performance gap that Bcachefs needs to bridge to stand toe-to-toe with its counterparts. The benchmarks were a sobering reminder that while strides have been made, the road ahead is still long and winding.\nDespite the slight setback, the community behind bcachefs is vibrant and determined, and with the right amount of polish and tuning, I believe bcachefs can rise to the occasion. The kernel integration is a testament to the filesystem’s potential, and I patiently wait to see to how it evolves.\nRelated Video ","date":"November 5, 2023","hero":"/posts/category/interestingprojects/bcachefs/bcachefs-6.7/images/bcachefs.jpg","permalink":"https://mrpenguin07.github.io/posts/category/interestingprojects/bcachefs/bcachefs-6.7/","summary":"What\u0026rsquo;s new with bcachefs Over the past year, my journey with bcachefs - in pursuit of unknown benefits - sure has been interesting, and full of drama if one reads the fs kernel mailing list. The project, with its vow to deliver enhanced performance and reliability, has no doubt made great progress and reached what many believed would (or should) never happen. The recent announcement of its inclusion in 6.7 Kernel was a triumphant moment, marking a significant milestone for the project.","tags":["Bcachefs","Linux Kernel","Filesystem Performance"],"title":"Bcachefs: A COWs Journey"},{"categories":null,"contents":"Introducing SwayFX: A Cutting-Edge Fork of the Sway Window Manager Enhanced Rendering with FX_Renderer SwayFX, a pioneering fork of the well-established Wayland window manager Sway, brings revolutionary features and visual enhancements.\nCentral to SwayFX is the fx_renderer, which replaces the simpler wlr_renderer, unleashing the potential of GLES2 for a visually stunning desktop experience.\nKey Features Blur Effects Rounded Corners and Borders Shadows Dim Unfocused Windows Per Application Saturation Control Seamless Integration with Sway SwayFX maintains complete compatibility with the Sway configuration file, allowing users to transition smoothly without needing to alter their existing setups.\nThe following new configuration options can be used to enable the advanced rendering feature set.\nAbove: User wickedlester shows off rounded corners \u0026amp; shadows\nAbove: User Danie shows off inactive blur effects\nNew Configuration Options Window Blur blur enable|disable blur_xray enable|disable blur_passes \u0026lt;integer\u0026gt; blur_radius \u0026lt;integer\u0026gt; Corner Radius corner_radius \u0026lt;val\u0026gt; Window Shadows shadows enable|disable shadows_on_csd enable|disable shadow_blur_radius \u0026lt;integer\u0026gt; shadow_color \u0026lt;hex color\u0026gt; shadow_inactive_color \u0026lt;hex color\u0026gt; LayerShell Effects layer_effects using the syntax \u0026lt;layer namespace\u0026gt; \u0026lt;effects\u0026gt; The current layer namespaces can be shown with\nswaymsg -r -t get_outputs | jq '.[0].layer_shell_surfaces | .[] | .namespace' Available Effects:\nblur \u0026lt;enable|disable\u0026gt; blur_ignore_transparent \u0026lt;enable|disable\u0026gt; shadows \u0026lt;enable|disable\u0026gt; corner_radius \u0026lt;int\u0026gt; Example: layer_effects \u0026quot;waybar\u0026quot; blur enable; shadows enable; corner_radius 6\nDim Unfocused Windows default_dim_inactive \u0026lt;float\u0026gt; for_window [CRITERIA] dim_inactive \u0026lt;float\u0026gt; dim_inactive_colors.unfocused \u0026lt;hex color\u0026gt; dim_inactive_colors.urgent \u0026lt;hex color\u0026gt; Application Saturation for_window [CRITERIA] saturation \u0026lt;set|plus|minus\u0026gt; \u0026lt;val\u0026gt; My Personal Config Have settled, at least for now, with the following config;\nsmart_corner_radius on corner_radius 10 default_dim_inactive 0.05 blur enable blur_passes 2 blur_radius 2 layer_effects \u0026#34;waybar\u0026#34; \u0026#34;blur enable\u0026#34;; shadows enable shadows on shadow_blur_radius 20 Roadmap: What’s Next for SwayFX Fade In/Out Animations Window Movement Animations Check out the SwayFX Github page! ","date":"November 5, 2023","hero":"/posts/category/interestingprojects/swaywm+swayfx/swayfx/images/swayfx_screenshot.jpg","permalink":"https://mrpenguin07.github.io/posts/category/interestingprojects/swaywm+swayfx/swayfx/","summary":"Introducing SwayFX: A Cutting-Edge Fork of the Sway Window Manager Enhanced Rendering with FX_Renderer SwayFX, a pioneering fork of the well-established Wayland window manager Sway, brings revolutionary features and visual enhancements.\nCentral to SwayFX is the fx_renderer, which replaces the simpler wlr_renderer, unleashing the potential of GLES2 for a visually stunning desktop experience.\nKey Features Blur Effects Rounded Corners and Borders Shadows Dim Unfocused Windows Per Application Saturation Control Seamless Integration with Sway SwayFX maintains complete compatibility with the Sway configuration file, allowing users to transition smoothly without needing to alter their existing setups.","tags":["SwayWM","DesktopEffects","Rendering"],"title":"SwayFX: Sway, but with eye candy!"},{"categories":null,"contents":"","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://mrpenguin07.github.io/notes/_index.bn/","summary":"","tags":null,"title":"নোট সমূহ"},{"categories":null,"contents":"Go Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://mrpenguin07.github.io/notes/go/_index.bn/","summary":"Go Notes ","tags":null,"title":"Go এর নোট সমূহ"},{"categories":null,"contents":"Bash Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://mrpenguin07.github.io/notes/bash/_index.bn/","summary":"Bash Notes ","tags":null,"title":"ব্যাশের নোট সমূহ"}]